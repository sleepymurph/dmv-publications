A distributed version control system allows for replicas of a repository with the full history of updates.
Updates and new commits can be done to each replica independent of each other.
Updates, including conflicting updates, are reconciled later in a peer-to-peer merge operation. This will bring replicas to a consistent state with each other.

These systems are popular, but their intended use is typically limited to the small text files of source code.
However, distributed version control can also be useful for larger files, including binary files of images, audio and video.

We report on the results from a set of experiments designed to characterise the behaviour of some widely used distributed version control systems.
The experiments measured commit times and repository sizes when storing single files of increasing size, and when storing increasing numbers of single-kilobyte files.
\todo{Write about repository sizes in text}

The goal is to better understand the behaviour and approaches used in those systems with the purpose of building a scalable, highly-available, distributed storage system for many large text and binary files residing on computers ranging from smart phones to servers.

An early prototype of such a system, Distributed Media Versioning (DMV), is briefly described and compared with Git and Mercurial, and the Git-based backup tool Bup.

We find that processing large files without splitting them into smaller parts will limit maximum file size to what can fit in RAM.
Storing millions of small files will result in inefficient use of disk space.
And storing files with hash-based file and directory names will result in high-latency write operations, due to having to switch between directories rather than performing a sequential write.
We conclude that large files must be split into smaller chunks to avoid the physical memory limitation, and that many small chunks should be aggregated into larger files to achieve low latency write operations and efficient use of disk space.

We intend to incorporate these insights into future versions of DMV.

% vim: nonumber colorcolumn= formatoptions-=t :
